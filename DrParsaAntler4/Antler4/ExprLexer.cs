//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Expr.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class ExprLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, ID=4, No=5, COMMENT=6, LINE_COMMENT=7, WS=8, MUL=9, 
		DIV=10, ADD=11, SUB=12;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "ID", "No", "LETTER", "DIGIT", "COMMENT", "LINE_COMMENT", 
		"WS", "MUL", "DIV", "ADD", "SUB"
	};


	public ExprLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public ExprLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "':='", "'('", "')'", null, null, null, null, null, "'*'", "'/'", 
		"'+'", "'-'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, "ID", "No", "COMMENT", "LINE_COMMENT", "WS", "MUL", 
		"DIV", "ADD", "SUB"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Expr.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static ExprLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x2', '\xE', '\x65', '\b', '\x1', '\x4', '\x2', '\t', '\x2', 
		'\x4', '\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', 
		'\x5', '\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', 
		'\t', '\b', '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', 
		'\t', '\v', '\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', 
		'\t', '\xE', '\x4', '\xF', '\t', '\xF', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\a', '\x5', '+', '\n', 
		'\x5', '\f', '\x5', '\xE', '\x5', '.', '\v', '\x5', '\x3', '\x6', '\x6', 
		'\x6', '\x31', '\n', '\x6', '\r', '\x6', '\xE', '\x6', '\x32', '\x3', 
		'\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\a', '\t', '=', '\n', '\t', '\f', '\t', '\xE', 
		'\t', '@', '\v', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\a', 
		'\n', 'K', '\n', '\n', '\f', '\n', '\xE', '\n', 'N', '\v', '\n', '\x3', 
		'\n', '\x5', '\n', 'Q', '\n', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\v', '\x6', '\v', 'X', '\n', '\v', '\r', '\v', '\xE', 
		'\v', 'Y', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', 
		'\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', 
		'\x4', '>', 'L', '\x2', '\x10', '\x3', '\x3', '\x5', '\x4', '\a', '\x5', 
		'\t', '\x6', '\v', '\a', '\r', '\x2', '\xF', '\x2', '\x11', '\b', '\x13', 
		'\t', '\x15', '\n', '\x17', '\v', '\x19', '\f', '\x1B', '\r', '\x1D', 
		'\xE', '\x3', '\x2', '\x5', '\x5', '\x2', '.', '.', '\x43', '\\', '\x63', 
		'|', '\x3', '\x2', '\x32', ';', '\x5', '\x2', '\v', '\f', '\xF', '\xF', 
		'\"', '\"', '\x2', 'j', '\x2', '\x3', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'\x5', '\x3', '\x2', '\x2', '\x2', '\x2', '\a', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\t', '\x3', '\x2', '\x2', '\x2', '\x2', '\v', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\x11', '\x3', '\x2', '\x2', '\x2', '\x2', '\x13', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\x15', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'\x17', '\x3', '\x2', '\x2', '\x2', '\x2', '\x19', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x2', '\x1D', '\x3', 
		'\x2', '\x2', '\x2', '\x3', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x5', 
		'\"', '\x3', '\x2', '\x2', '\x2', '\a', '$', '\x3', '\x2', '\x2', '\x2', 
		'\t', '&', '\x3', '\x2', '\x2', '\x2', '\v', '\x30', '\x3', '\x2', '\x2', 
		'\x2', '\r', '\x34', '\x3', '\x2', '\x2', '\x2', '\xF', '\x36', '\x3', 
		'\x2', '\x2', '\x2', '\x11', '\x38', '\x3', '\x2', '\x2', '\x2', '\x13', 
		'\x46', '\x3', '\x2', '\x2', '\x2', '\x15', 'W', '\x3', '\x2', '\x2', 
		'\x2', '\x17', ']', '\x3', '\x2', '\x2', '\x2', '\x19', '_', '\x3', '\x2', 
		'\x2', '\x2', '\x1B', '\x61', '\x3', '\x2', '\x2', '\x2', '\x1D', '\x63', 
		'\x3', '\x2', '\x2', '\x2', '\x1F', ' ', '\a', '<', '\x2', '\x2', ' ', 
		'!', '\a', '?', '\x2', '\x2', '!', '\x4', '\x3', '\x2', '\x2', '\x2', 
		'\"', '#', '\a', '*', '\x2', '\x2', '#', '\x6', '\x3', '\x2', '\x2', '\x2', 
		'$', '%', '\a', '+', '\x2', '\x2', '%', '\b', '\x3', '\x2', '\x2', '\x2', 
		'&', ',', '\x5', '\r', '\a', '\x2', '\'', '+', '\x5', '\r', '\a', '\x2', 
		'(', '+', '\x5', '\xF', '\b', '\x2', ')', '+', '\a', '\x61', '\x2', '\x2', 
		'*', '\'', '\x3', '\x2', '\x2', '\x2', '*', '(', '\x3', '\x2', '\x2', 
		'\x2', '*', ')', '\x3', '\x2', '\x2', '\x2', '+', '.', '\x3', '\x2', '\x2', 
		'\x2', ',', '*', '\x3', '\x2', '\x2', '\x2', ',', '-', '\x3', '\x2', '\x2', 
		'\x2', '-', '\n', '\x3', '\x2', '\x2', '\x2', '.', ',', '\x3', '\x2', 
		'\x2', '\x2', '/', '\x31', '\x5', '\xF', '\b', '\x2', '\x30', '/', '\x3', 
		'\x2', '\x2', '\x2', '\x31', '\x32', '\x3', '\x2', '\x2', '\x2', '\x32', 
		'\x30', '\x3', '\x2', '\x2', '\x2', '\x32', '\x33', '\x3', '\x2', '\x2', 
		'\x2', '\x33', '\f', '\x3', '\x2', '\x2', '\x2', '\x34', '\x35', '\t', 
		'\x2', '\x2', '\x2', '\x35', '\xE', '\x3', '\x2', '\x2', '\x2', '\x36', 
		'\x37', '\t', '\x3', '\x2', '\x2', '\x37', '\x10', '\x3', '\x2', '\x2', 
		'\x2', '\x38', '\x39', '\a', '\x31', '\x2', '\x2', '\x39', ':', '\a', 
		',', '\x2', '\x2', ':', '>', '\x3', '\x2', '\x2', '\x2', ';', '=', '\v', 
		'\x2', '\x2', '\x2', '<', ';', '\x3', '\x2', '\x2', '\x2', '=', '@', '\x3', 
		'\x2', '\x2', '\x2', '>', '?', '\x3', '\x2', '\x2', '\x2', '>', '<', '\x3', 
		'\x2', '\x2', '\x2', '?', '\x41', '\x3', '\x2', '\x2', '\x2', '@', '>', 
		'\x3', '\x2', '\x2', '\x2', '\x41', '\x42', '\a', ',', '\x2', '\x2', '\x42', 
		'\x43', '\a', '\x31', '\x2', '\x2', '\x43', '\x44', '\x3', '\x2', '\x2', 
		'\x2', '\x44', '\x45', '\b', '\t', '\x2', '\x2', '\x45', '\x12', '\x3', 
		'\x2', '\x2', '\x2', '\x46', 'G', '\a', '\x31', '\x2', '\x2', 'G', 'H', 
		'\a', '\x31', '\x2', '\x2', 'H', 'L', '\x3', '\x2', '\x2', '\x2', 'I', 
		'K', '\v', '\x2', '\x2', '\x2', 'J', 'I', '\x3', '\x2', '\x2', '\x2', 
		'K', 'N', '\x3', '\x2', '\x2', '\x2', 'L', 'M', '\x3', '\x2', '\x2', '\x2', 
		'L', 'J', '\x3', '\x2', '\x2', '\x2', 'M', 'P', '\x3', '\x2', '\x2', '\x2', 
		'N', 'L', '\x3', '\x2', '\x2', '\x2', 'O', 'Q', '\a', '\xF', '\x2', '\x2', 
		'P', 'O', '\x3', '\x2', '\x2', '\x2', 'P', 'Q', '\x3', '\x2', '\x2', '\x2', 
		'Q', 'R', '\x3', '\x2', '\x2', '\x2', 'R', 'S', '\a', '\f', '\x2', '\x2', 
		'S', 'T', '\x3', '\x2', '\x2', '\x2', 'T', 'U', '\b', '\n', '\x2', '\x2', 
		'U', '\x14', '\x3', '\x2', '\x2', '\x2', 'V', 'X', '\t', '\x4', '\x2', 
		'\x2', 'W', 'V', '\x3', '\x2', '\x2', '\x2', 'X', 'Y', '\x3', '\x2', '\x2', 
		'\x2', 'Y', 'W', '\x3', '\x2', '\x2', '\x2', 'Y', 'Z', '\x3', '\x2', '\x2', 
		'\x2', 'Z', '[', '\x3', '\x2', '\x2', '\x2', '[', '\\', '\b', '\v', '\x2', 
		'\x2', '\\', '\x16', '\x3', '\x2', '\x2', '\x2', ']', '^', '\a', ',', 
		'\x2', '\x2', '^', '\x18', '\x3', '\x2', '\x2', '\x2', '_', '`', '\a', 
		'\x31', '\x2', '\x2', '`', '\x1A', '\x3', '\x2', '\x2', '\x2', '\x61', 
		'\x62', '\a', '-', '\x2', '\x2', '\x62', '\x1C', '\x3', '\x2', '\x2', 
		'\x2', '\x63', '\x64', '\a', '/', '\x2', '\x2', '\x64', '\x1E', '\x3', 
		'\x2', '\x2', '\x2', '\n', '\x2', '*', ',', '\x32', '>', 'L', 'P', 'Y', 
		'\x3', '\b', '\x2', '\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
